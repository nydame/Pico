{% extends "base.html" %}

{% block section1 %}
    <section class="site-intro">
        <div class="inner">
            <div class="welcome-wrap">
                <p class="main-intro">
                    <span>On the web there are no roads.</span>
                    <span>You&nbsp;can&nbsp;go&nbsp;anywhere.</span>
                </p>
                <aside>But what if you need a guide?</aside>
            </div>
        </div>
    </section>
{% endblock %}

{% block section2 %}
    {{ content }}
{% endblock %}

{% block page_specific_scripts %}
<script>
    (function() {
        var readButtons = document.querySelectorAll('.more-less [role="button"]'),
            allParentDivs = document.querySelectorAll('.more-less'),
            OFFTEXT = 'Read',
            ONTEXT = 'X';

        for (var i = readButtons.length; i > 0; i--) {
            readButtons[i-1].addEventListener( 'click', function() {
                var url = "{{ theme_url }}" + "/includes/case" + this.parentNode.parentNode.dataset.casestudy + ".html",
                    parentDiv = this.parentNode;
                if ( parentDiv.classList.contains('active') ) {
                    // if "on" then turn "off"
                    deactivateAll(); 
                } else if ( parentDiv.classList.contains('loaded') ) {
                    // if not "on", but content is just hidden, hide others and show it
                    deactivateAll();
                    activateParent( parentDiv );
                    switchButtonTextOn( this );
                } else if ( parentDiv.classList.contains('waiting') ) {
                    // click is already being handled, so do nothing
                    return;
                } else {
                    // virgin click!
                    makeReq( 'GET', url, parentDiv );
                    switchButtonTextOn( this );
                }

            }, false );
        };

        function makeReq( httpMethod, url, aNode ) {
            var xhr = new XMLHttpRequest();
            // tell xhr who the parent node is
            xhr.container = aNode;
            xhr.addEventListener( 'progress', progressHandler );
            xhr.addEventListener( 'load', loadHandler );
            xhr.addEventListener( 'error', errorHandler );
            xhr.addEventListener( 'abort', abortHandler );
            xhr.open( httpMethod, url, true ); // true = asynch
            xhr.send();
        }

        // XHR EVENT HANDLERS

        function progressHandler(ev) {
            var container = this.container;
            prepareParent( container );
        }

        function loadHandler(ev) {
            var container = this.container,
                tempNodeList,
                targetNode;
            deactivateAll();
            // find .async within container
            tempNodeList = container.getElementsByClassName('async');
            targetNode = tempNodeList[0]; console.log(targetNode);
            targetNode.innerHTML = this.responseText;
            activateParent( container );
        }

        function errorHandler(ev) {
            var container = this.container;
            console.log("error");
        }

        function abortHandler(ev) {
            var container = this.container;
            console.log("abort");
        }

        // UTILITY FNS FOR IMPLEMENTING STATE CHANGES

        function prepareParent( aNode ) {
            aNode.classList.add('waiting');
        }

        function activateParent( aNode ) {
            // note that class "loaded" is never removed once added
            aNode.classList.add("active");
            aNode.classList.add("loaded");
            // change butotn text to ONTEXT
            switchButtonTextOn( aNode.querySelector( '[role="button"]' ) );
        }

        function deactivateAll() {
            // go through all of the 'more-less' divs
            for (var i = allParentDivs.length; i > 0; i--) {
                // remove class 'waiting'
                if ( allParentDivs[i-1].classList.contains("waiting") ) {
                    allParentDivs[i-1].classList.remove("waiting");
                }
                // remove class 'active'
                if ( allParentDivs[i-1].classList.contains("active") ) {
                    allParentDivs[i-1].classList.remove("active");
                }
                // change button text to OFFTEXT
                switchButtonTextOff( allParentDivs[i-1].querySelector( '[role="button"]' ) );
            }
        }

        function switchButtonTextOff ( aNode ) {
            aNode.innerHTML = OFFTEXT;
        }

        function switchButtonTextOn ( aNode ) {
            aNode.innerHTML = ONTEXT;
        }

    })();
</script>
{% endblock %}

