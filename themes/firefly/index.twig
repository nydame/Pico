{% extends "base.html" %}

{% block section1 %}
    <section class="site-intro">
        <div class="inner">
            <div class="welcome-wrap">
                <p class="main-intro">
                    <span>On the web there are no roads.</span>
                    <span>You&nbsp;can&nbsp;go&nbsp;anywhere.</span>
                </p>
                <aside>But what if you need a guide?</aside>
            </div>
        </div>
    </section>
{% endblock %}

{% block section2 %}
    {{ content }}
{% endblock %}

{% block page_specific_scripts %}
<script>
    (function() {
        var readButtons = document.querySelectorAll('.more-less [role="button"]'),
            allParentDivs = document.querySelectorAll('more-less');

        for (var i = readButtons.length; i > 0; i--) {
            readButtons[i-1].addEventListener( 'click', function() {
                var url = "{{ theme_url }}" + "/includes/case" + this.parentNode.parentNode.dataset.casestudy + ".html",
                    parentDiv = this.parentNode;
                makeReq( 'GET', url, parentDiv );

            }, false );
        };

        function makeReq( httpMethod, url, aNode ) {
            var xhr = new XMLHttpRequest();
            // tell xhr who the parent node is
            xhr.pNode = aNode;
            xhr.addEventListener( 'progress', progressHandler );
            xhr.addEventListener( 'load', loadHandler );
            xhr.addEventListener( 'error', errorHandler );
            xhr.addEventListener( 'abort', abortHandler );
            xhr.open( httpMethod, url, true ); // true = asynch
            xhr.send();
        }

        // XHR EVENT HANDLERS

        function progressHandler(ev) {
            var pNode = this.pNode;
            console.log("progress");
            prepareParent( pNode );
        }

        function loadHandler(ev) {
            var pNode = this.pNode;
            console.log("load");
            deactivateAll();
            pNode.appendChild(this.responseText);
            activateParent( pNode );
        }

        function errorHandler(ev) {
            var pNode = this.pNode;
            console.log("error");
        }

        function abortHandler(ev) {
            var pNode = this.pNode;
            console.log("abort");
        }

        // UTILITY FNS FOR IMPLEMENTING STATE CHANGES

        function prepareParent( aNode ) {
            aNode.classList.add('waiting');
        }

        function activateParent( aNode ) {
            aNode.classList("active");
        }

        function deactivateAll() {
            for (var i = allParentDivs.length; i > 0; i--) {
                allParentDivs[i-1].classList.remove("waiting");
                allParentDivs[i-1].classList.remove("active");
            };
        }

    })();
</script>
{% endblock %}

